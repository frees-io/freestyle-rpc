language: scala
jdk:
  - openjdk8
dist: xenial
scala:
  - 2.12.10
  - 2.13.1
before_cache:
  - du -h -d 1 $HOME/.ivy2/
  - du -h -d 2 $HOME/.sbt/
  - du -h -d 4 $HOME/.coursier/
  - find $HOME/.sbt -name "*.lock" -type f -delete
  - find $HOME/.ivy2/cache -name "ivydata-*.properties" -type f -delete
cache:
  directories:
  - "$HOME/.sbt/cache"
  - "$HOME/.sbt/1.0"
  - "$HOME/.sbt/boot/"
  - "$HOME/.sbt/boot/scala*"
  - "$HOME/.sbt/launchers"
  - "$HOME/.ivy2/cache"
  - "$HOME/.ivy2"
before_install:
  - if [ "$TRAVIS_BRANCH" = "master" -a "$TRAVIS_PULL_REQUEST" = "false" ]; then
      openssl aes-256-cbc -K $encrypted_95edac5cb8ef_key -iv $encrypted_95edac5cb8ef_iv -in secret_key.asc.enc -out secret_key.asc -d;
      gpg --import --batch --passphrase "$PGP_PASSPHRASE" secret_key.asc;
    fi
install:
  - rvm use 2.6.5 --install --fuzzy
  - gem install jekyll -v 4

script:
  - curl -s https://codecov.io/bash > .codecov
  - sed -i -e 's/TRAVIS_.*_VERSION/^TRAVIS_.*_VERSION=/' .codecov
  - chmod +x .codecov
  - sbt ++$TRAVIS_SCALA_VERSION clean coverage test coverageReport coverageAggregate
  - if [ $TRAVIS_SCALA_VERSION = "2.13.1" ]; then ./.codecov -X gcov; fi

stages:
  - test
  - deploy
  - microsite
jobs:
  include:
    - name: "check docs"
      scala: 2.12.10
      script:
        - sbt ++$TRAVIS_SCALA_VERSION docs/makeMicrosite
    - name: "non-cross-compiled modules check"
      scala: 2.12.10
      script:
        - sbt ++$TRAVIS_SCALA_VERSION examples/test
    - name: "sbt plugin tests"
      scala: 2.12.10
      script:
        - sbt ++$TRAVIS_SCALA_VERSION srcgen-core/test
        - sbt ++$TRAVIS_SCALA_VERSION srcgen-sbt/test
        - sbt ++$TRAVIS_SCALA_VERSION publishLocal srcgen-sbt/publishLocal srcgen-sbt/scripted
    - stage: deploy
      scala: 2.13.1
      if: branch = master AND type != pull_request AND env(SKIP_SBT_DEPLOY) = false
      name: "Publish sbt plugin"
      script:
        - if grep -q "SNAPSHOT" version.sbt; then
            sbt srcgen-sbt/publish;
          else
            sbt ";project srcgen-sbt; release";
          fi
    - stage: deploy
      scala: 2.13.1
      if: branch = master AND type != pull_request
      name: "Publish all other artifacts"
      script:
        - if grep -q "SNAPSHOT" version.sbt; then
            sbt +publish;
          else
            sbt orgUpdateDocFiles;
            git reset --hard HEAD;
            git clean -f;
            git checkout master;
            git pull origin master;
            sbt release;
          fi
    - stage: microsite
      scala: 2.12.10
      if: branch = master AND type != pull_request
      name: "Publish microsite"
      script:
        - if grep -q "SNAPSHOT" version.sbt; then
            echo "Skipping microsite publication, snapshot version";
          else
            sbt docs/publishMicrosite;
          fi
